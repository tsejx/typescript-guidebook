(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[44],{gDJ9:function(e,n,a){"use strict";a.r(n);var t=a("q1tI"),r=a.n(t),l=(a("B2uJ"),a("+su7"),a("qOys")),m=a.n(l);a("5Yjd");n["default"]=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"markdown"},r.a.createElement("h1",{id:"\u5bf9\u8c61\u7684\u7c7b\u578b--\u63a5\u53e3"},r.a.createElement("a",{"aria-hidden":"true",href:"#\u5bf9\u8c61\u7684\u7c7b\u578b--\u63a5\u53e3"},r.a.createElement("span",{className:"icon icon-link"})),"\u5bf9\u8c61\u7684\u7c7b\u578b / \u63a5\u53e3"),r.a.createElement("p",null,"\u63a5\u53e3\u662f\u5bf9\u8c61\u7684\u7c7b\u578b\u3002"),r.a.createElement("p",null,"TypeScript \u7684\u6838\u5fc3\u539f\u5219\u4e4b\u4e00\u662f\u5bf9\u503c\u5177\u6709\u7ed3\u6784\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u5b83\u6709\u65f6\u88ab\u79f0\u4f5c\u300c\u9e2d\u5f0f\u8fa8\u578b\u300d\u6216\u300c\u7ed3\u6784\u6027\u5b50\u7c7b\u578b\u5316\u300d\u3002\u5728 TypeScript \u91cc\uff0c\u63a5\u53e3\u7684\u4f5c\u7528\u5c31\u662f\u4e3a\u8fd9\u4e9b\u7c7b\u578b\u547d\u540d\u548c\u4e3a\u4f60\u7684\u4ee3\u7801\u6216\u7b2c\u4e09\u65b9\u4ee3\u7801\u5b9a\u4e49\u5951\u7ea6\uff0c"),r.a.createElement("h2",{id:"\u4ec0\u4e48\u662f\u63a5\u53e3"},r.a.createElement("a",{"aria-hidden":"true",href:"#\u4ec0\u4e48\u662f\u63a5\u53e3"},r.a.createElement("span",{className:"icon icon-link"})),"\u4ec0\u4e48\u662f\u63a5\u53e3"),r.a.createElement("p",null,"\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\uff0c\u63a5\u53e3\uff08Interfaces\uff09\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u5b83\u662f\u5bf9\u884c\u4e3a\u7684\u62bd\u8c61\uff0c\u800c\u5177\u4f53\u5982\u4f55\u884c\u52a8\u9700\u8981\u7531\u7c7b\uff08classes\uff09\u53bb\u5b9e\u73b0\uff08implement\uff09\u3002"),r.a.createElement("p",null,"TypeScript \u4e2d\u7684\u63a5\u53e3\u662f\u4e00\u4e2a\u975e\u5e38\u7075\u6d3b\u7684\u6982\u5ff5\uff0c\u9664\u4e86\u53ef\u7528\u4e8e ",r.a.createElement("a",{href:"https://ts.xcatliu.com/advanced/class-and-interfaces#%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"},"\u5bf9\u7c7b\u7684\u4e00\u90e8\u5206\u884c\u4e3a\u8fdb\u884c\u62bd\u8c61",r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":!0,x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15",className:"__dumi-default-external-link-icon"},r.a.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),r.a.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"})))," \u4ee5\u5916\uff0c\u4e5f\u5e38\u7528\u4e8e\u5bf9\u300c\u5bf9\u8c61\u7684\u5f62\u72b6\uff08Shape\uff09\u300d\u8fdb\u884c\u63cf\u8ff0\u3002"),r.a.createElement("h2",{id:"\u57fa\u7840\u7528\u6cd5"},r.a.createElement("a",{"aria-hidden":"true",href:"#\u57fa\u7840\u7528\u6cd5"},r.a.createElement("span",{className:"icon icon-link"})),"\u57fa\u7840\u7528\u6cd5"),r.a.createElement(m.a,{code:"interface Person {\n  name: string;\n  age: number;\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25,\n};\n",lang:"ts"}),r.a.createElement("p",null,"\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u53e3 Person\uff0c\u63a5\u7740\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf ",r.a.createElement("code",null,"tom"),"\uff0c\u5b83\u7684\u7c7b\u578b\u662f ",r.a.createElement("code",null,"Person"),"\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u7ea6\u675f\u4e86 ",r.a.createElement("code",null,"tom")," \u7684\u5f62\u72b6\u5fc5\u987b\u548c\u63a5\u53e3 ",r.a.createElement("code",null,"Person")," \u4e00\u81f4\u3002"),r.a.createElement("p",null,"\u63a5\u53e3\u4e00\u822c\u9996\u5b57\u6bcd\u5927\u5199\u3002\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4f1a\u5efa\u8bae\u63a5\u53e3\u7684\u540d\u79f0\u52a0\u4e0a ",r.a.createElement("code",null,"I")," \u524d\u7f00\u3002"),r.a.createElement("p",null,"\u5b9a\u4e49\u7684\u53d8\u91cf\u6bd4\u63a5\u53e3\u5c11\u4e86\u4e00\u4e9b\u5c5e\u6027\u662f\u4e0d\u5141\u8bb8\u7684\uff1a"),r.a.createElement(m.a,{code:"interface Person {\n    name: string;\n    age: number;\n}\n\nlet tom: Person = {\n    name: 'Tom\n}\n// index.ts(6,5): error TS2322: Type '{ name: string; }' is not assignable to type 'Person'.\n// Property 'age' is missing in type '{ name: string; }'.\n",lang:"ts"}),r.a.createElement("p",null,"\u591a\u4e00\u4e9b\u5c5e\u6027\u4e5f\u662f\u4e0d\u5141\u8bb8\u7684\uff1a"),r.a.createElement(m.a,{code:"interface Person {\n  name: string;\n  age: number;\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25,\n  gender: 'male',\n};\n\n// index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.\n//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.\n",lang:"ts"}),r.a.createElement("p",null,"\u53ef\u89c1\uff0c\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u53d8\u91cf\u7684\u5f62\u72b6\u5fc5\u987b\u548c\u63a5\u53e3\u4fdd\u6301\u4e00\u81f4\u3002"),r.a.createElement("h2",{id:"\u53ef\u9009\u5c5e\u6027"},r.a.createElement("a",{"aria-hidden":"true",href:"#\u53ef\u9009\u5c5e\u6027"},r.a.createElement("span",{className:"icon icon-link"})),"\u53ef\u9009\u5c5e\u6027"),r.a.createElement("p",null,"\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u4e0d\u8981\u5b8c\u5168\u5339\u914d\u4e00\u4e2a\u5f62\u72b6\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u53ef\u9009\u5c5e\u6027\uff1a"),r.a.createElement(m.a,{code:"interface Person {\n  name: string;\n  age?: number;\n}\n\nlet tom: Person = {\n  name: 'Tom',\n};\n",lang:"ts"}),r.a.createElement(m.a,{code:"interface Person {\n  name: string;\n  age?: number;\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25,\n};\n",lang:"ts"}),r.a.createElement("p",null,"\u53ef\u9009\u5c5e\u6027\u7684\u542b\u4e49\u662f\u8be5\u5c5e\u6027\u53ef\u4ee5\u4e0d\u5b58\u5728\u3002"),r.a.createElement("p",null,"\u8fd9\u65f6\u4ecd\u7136\u4e0d\u5141\u8bb8\u6dfb\u52a0\u672a\u5b9a\u4e49\u7684\u5c5e\u6027\uff1a"),r.a.createElement(m.a,{code:"interface Person {\n  name: string;\n  age?: number;\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25,\n  gender: 'male',\n};\n\n// examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.\n//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.\n",lang:"ts"}),r.a.createElement("p",null,"\u8fd9\u65f6\u4ecd\u7136\u4e0d\u5141\u8bb8\u6dfb\u52a0\u672a\u5b9a\u4e49\u7684\u5c5e\u6027\u3002"),r.a.createElement("h2",{id:"\u4efb\u610f\u5c5e\u6027"},r.a.createElement("a",{"aria-hidden":"true",href:"#\u4efb\u610f\u5c5e\u6027"},r.a.createElement("span",{className:"icon icon-link"})),"\u4efb\u610f\u5c5e\u6027"),r.a.createElement("p",null,"\u6709\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u4e00\u4e2a\u63a5\u53e3\u5141\u8bb8\u6709\u4efb\u610f\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\uff1a"),r.a.createElement(m.a,{code:"interface Person {\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n",lang:"ts"}),r.a.createElement("p",null,"\u4f7f\u7528 ",r.a.createElement("code",null,"[propName: string]")," \u5b9a\u4e49\u4e86\u4efb\u610f\u5c5e\u6027\u53d6 ",r.a.createElement("code",null,"string")," \u7c7b\u578b\u7684\u503c\u3002"),r.a.createElement("p",null,"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u65e6\u5b9a\u4e49\u4e86\u4efb\u610f\u5c5e\u6027\uff0c\u90a3\u4e48\u786e\u5b9a\u5c5e\u6027\u548c\u53ef\u9009\u5c5e\u6027\u7684\u53c2\u52a0\u7c7b\u578b\u90fd\u5fc5\u987b\u662f\u5b83\u7684\u7c7b\u578b\u7684\u5b50\u96c6\uff1a"),r.a.createElement(m.a,{code:"interface Person {\n    name: string;\n    age?: number;\n    [prop:string]: string;\n}\n\nlet tom: Person {\n    name: 'Tom',\n    age: 25,\n    gender: 'male'\n}\n\n// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'.\n// index.ts(7,5): error TS2322: Type '{ [x: string]: string | number; name: string; age: number; gender: string; }' is not assignable to type 'Person'.\n//   Index signatures are incompatible.\n//     Type 'string | number' is not assignable to type 'string'.\n//       Type 'number' is not assignable to type 'string'.\n",lang:"ts"}),r.a.createElement("p",null,"\u4e0a\u4f8b\u4e2d\uff0c\u4efb\u610f\u5c5e\u6027\u7684\u503c\u5141\u8bb8\u662f ",r.a.createElement("code",null,"string"),"\uff0c\u4f46\u662f\u53ef\u9009\u5c5e\u6027 ",r.a.createElement("code",null,"age")," \u7684\u503c\u5374\u662f ",r.a.createElement("code",null,"number"),"\uff0c",r.a.createElement("code",null,"number")," \u4e0d\u662f ",r.a.createElement("code",null,"string")," \u7684\u5b50\u5c5e\u6027\uff0c\u6240\u4ee5\u62a5\u9519\u4e86\u3002"),r.a.createElement("p",null,"\u53e6\u5916\uff0c\u5728\u62a5\u9519\u4fe1\u606f\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u65f6 ",r.a.createElement("code",null,"{"," name: 'Tom', age: 25, gender: 'male' ","}")," \u7684\u7c7b\u578b\u88ab\u63a8\u65ad\u6210\u4e86 ",r.a.createElement("code",null,"{"," [x: string]: string | number; name: string; age: number; gender: string; ","}"),"\uff0c\u8fd9\u662f\u8054\u5408\u7c7b\u578b\u548c\u63a5\u53e3\u7684\u7ed3\u5408\u3002"),r.a.createElement("h2",{id:"\u53ea\u8bfb\u5c5e\u6027"},r.a.createElement("a",{"aria-hidden":"true",href:"#\u53ea\u8bfb\u5c5e\u6027"},r.a.createElement("span",{className:"icon icon-link"})),"\u53ea\u8bfb\u5c5e\u6027"),r.a.createElement("p",null,"\u6709\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u53ea\u80fd\u5728\u521b\u5efa\u7684\u65f6\u5019\u88ab\u8d4b\u503c\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528 ",r.a.createElement("code",null,"readonly")," \u5b9a\u4e49\u53ea\u8bfb\u5c5e\u6027\uff1a"),r.a.createElement(m.a,{code:"interface Person {\n  readonly id: number;\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet tom: Person = {\n  id: 89757,\n  name: 'Tom',\n  gender: 'male',\n};\n\ntom.id = 9527;\n\n// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.\n",lang:"ts"}),r.a.createElement("p",null,"\u4e0a\u4f8b\u4e2d\uff0c\u4f7f\u7528 ",r.a.createElement("code",null,"readonly")," \u5b9a\u4e49\u7684\u5c5e\u6027 ",r.a.createElement("code",null,"id")," \u521d\u59cb\u5316\u540e\uff0c\u53c8\u88ab\u8d4b\u503c\u4e86\uff0c\u6240\u4ee5\u62a5\u9519\u4e86\u3002"),r.a.createElement("p",null,"\u6ce8\u610f\uff0c\u53ea\u8bfb\u7684\u7ea6\u675f\u5b58\u5728\u4e8e\u7b2c\u4e00\u6b21\u7ed9\u5bf9\u8c61\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u800c\u4e0d\u662f\u7b2c\u4e00\u6b21\u7ed9\u53ea\u8bfb\u5c5e\u6027\u8d4b\u503c\u7684\u65f6\u5019\uff1a"),r.a.createElement(m.a,{code:"interface Person {\n  readonly id: number;\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  gender: 'male',\n};\n\ntom.id = 89757;\n\n// index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable to type 'Person'.\n//   Property 'id' is missing in type '{ name: string; gender: string; }'.\n// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.\n",lang:"ts"}),r.a.createElement("p",null,"\u4e0a\u4f8b\u4e2d\uff0c\u62a5\u9519\u4fe1\u606f\u6709\u4e24\u5904\uff0c\u7b2c\u4e00\u5904\u662f\u5728\u5bf9 ",r.a.createElement("code",null,"tom")," \u8fdb\u884c\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u7ed9 ",r.a.createElement("code",null,"id")," \u8d4b\u503c\u3002"),r.a.createElement("p",null,"\u7b2c\u4e8c\u5904\u662f\u5728\u7ed9 ",r.a.createElement("code",null,"tom.id")," \u8d4b\u503c\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u5b83\u662f\u53ea\u8bfb\u5c5e\u6027\uff0c\u6240\u4ee5\u62a5\u9519\u4e86\u3002")))}}}]);